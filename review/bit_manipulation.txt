my computer is 64 bits

is there at least one 1?
0 | 0 = 0
0 | 1 = 1
1 | 0 = 1
1 | 1 = 1

are they both 1?
0 & 0 = 0
0 & 1 = 0
1 & 0 = 0
1 & 1 = 1

is there exactly one 1?
0 ^ 0 = 0
0 ^ 1 = 1
1 ^ 0 = 1
1 ^ 1 = 0

1 ^ x = ~x
0 ^ x = x
x ^ x = 0

XOR returns true if there's only ONE bit set, ie if the bits are different.
use 8 bit to solve manipulation problems

if you have 8 things that are true or false, you can express all that information with one integer

0 =  0000 0000 
1 =  0000 0001
2 =  0000 0010
3 =  0000 0011
4 =  0000 0100
5 =  0000 0101
6 =  0000 0110
7 =  0000 0111
8 =  0000 1000
9 =  0000 1001
10 = 0000 1010
11 = 0000 1011
12 = 0000 1100
13 = 0000 1101
14 = 0000 1110
15 = 0000 1111
16 = 0001 0000
17 = 0001 0001
18 = 0001 0010
19 = 0001 0011
20 = 0001 0100
21 = 0001 0101
22 = 0001 0110
23 = 0001 0111
24 = 0001 1000
25 = 0001 1001
26 = 0001 1010
27 = 0001 1011
28 = 0001 1100
29 = 0001 1101
30 = 0001 1110
31 = 0001 1111
32 = 0010 0000
33 = 0010 0001
34 = 0010 0010
35 = 0010 0011
36 = 0010 0100
37 = 0010 0101
38 = 0010 0110
39 = 0010 0111
40 = 0010 1000
41 = 0010 1001
42 = 0010 1010
43 = 0010 1011
44 = 0010 1100
45 = 0010 1101
46 = 0010 1110
47 = 0010 1111
48 = 0011 0000
49 = 0011 0001
50 = 0011 0010
51 = 0011 0011
52 = 0011 0100
53 = 0011 0101
54 = 0011 0110
55 = 0011 0111
56 = 0011 1000
57 = 0011 1001
58 = 0011 1010
59 = 0011 1011
60 = 0011 1100
61 = 0011 1101
62 = 0011 1110
63 = 0011 1111
64 = 0100 0000

num << 1 == num * 2
num >> 1 == nums / 2

TO SET A BIT:
start with mask = 0000 0001
shift the 1 bit left number of positions (eg. 6)
now mask is 0100 0000
applying | to original number and the mask that you've created is like putting the mask on, gives you original number with the correct position newly set to 1.
mask = 1 << position
num | mask

TO CLEAR A BIT:
create mask: 1111 1110 => 1101 1111
og #: 0010 1001
& 0000 1001
mask = ~ (1 << position)
num & mask

TO UPDATE A BIT:
mask = 1 << position
num ^ mask

TO GET A BIT:
mask = 1 << position
num & mask != 0
num & mask will leave only desired bit and all other bits 0
if all 0, then bit was not set. otherwise, bit was set.
OR
shifted = x >> position
shifted & 0000 0001