Relational Data
Define normalization and denormalization and their tradeoffs:
Normalized data provides flexible querying and modeling (1:M, M:M, etc.), efficient storage (data is in one place), and consistency.
Denormalized data can provide better performance for certain operations in exchange for less flexibility, storage space, and consistency.
Example: cached aggregate calculation.

Constraints
What is a constraint?
What types of constraints are there? Describe how each works. (NULL, unique, check)
What are the benefits of database constraints?
Protect data integrity (values) and referential integrity (connections)
Frees application and its developers from having to handle missing/invalid data.

Indexes
What is an index?
A good analogy for how database indexes work:
library index cards for books
the books can be physically on the shelves, but with indexed cards, we can find them in other ways quickly
Indexes provide faster reading by performing some work at write time.
Database indexes are sometimes implemented using B-trees (a generalization of binary search tree).
Know what columns are typically indexed: primary key (usually automatic), foreign keys, columns used in WHERE clauses, aggregate keys.
Composite indexes use more than one column.
One technique to determining what columns to index:
Prepend EXPLAIN to a SQL statement and look for sequential scans.